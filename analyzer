#!/usr/bin/python2 -u
import argparse
from datetime import datetime, timedelta
import os
import sys
import operator

args = None

def main():
  global args
  parser = argparse.ArgumentParser(description='Analyze a log file generated by tracker.')
  parser.add_argument('file', type=file, help='tracker log file')
  parser.add_argument('--start', type=parse_user_date, help='Starting date/time')
  parser.add_argument('--end', type=parse_user_date, help='Ending date/time')
  parser.add_argument('--day', type=parse_user_date, help='Analyze entire day')
  parser.add_argument('--today', action='store_const', dest='day', const=datetime.today(), help='Analyze today')
  parser.add_argument('--debug', help='Print debug messages', action='store_true')
  args = parser.parse_args()
  if args.day:
    args.start = args.day.replace(hour=0, minute=0, second=0, microsecond=0)
    args.end = args.start+timedelta(days=1)
  if args.end > datetime.today():
    args.end = datetime.today().replace(microsecond=0)
  if not (args.start and args.end):
    print "You must provide --start and --end or --day or --today"
    sys.exit(1)
  bin_search(args.file, args.start)
  events = []
  while True:
    line = args.file.readline()
    if len(line) == 0:
      break
    event = LogEvent(line)
    if event.timestamp >= args.end:
      break
    events.append(event)
  debug("Found %s events between %s and %s" % (len(events), args.start, args.end))
  if len(events) == 0:
    print "No events found!"
    sys.exit(1)
  if events[0].timestamp < args.start:
    events[0].timestamp = args.start
  events.append(LogEvent(timestamp=args.end))
  window_class = {}
  window_title = {}
  for i in xrange(len(events)-1):
    event = events[i]
    if event.window_id in ('screensaver', 'exit'):
      continue
    event.length = events[i+1].timestamp - event.timestamp
    if event.window_class in window_class:
      window_class[event.window_class] += event.length
    else:
      window_class[event.window_class] = event.length
    if event.window_title in window_title:
      window_title[event.window_title] += event.length
    else:
      window_title[event.window_title] = event.length
  classes = sorted(window_class.iteritems(), key=operator.itemgetter(1), reverse=True)
  titles = sorted(window_title.iteritems(), key=operator.itemgetter(1), reverse=True)
  print 'Top classes:'
  for c in classes[0:10]:
    print "%s\t%s" % (c[1], c[0])
  print 'Top titles:'
  for t in titles[0:10]:
    print "%s\t%s" % (t[1], t[0])

def debug(string):
  global args
  if args.debug:
    print string

def bin_search(file, search):
  start = 0
  file.seek(0, os.SEEK_END)
  end = file.tell()
  while start != end:
    cur = (end+start)/2
    file.seek(cur)
    char = file.read(1)
    while char != "\n":
      if file.tell() >= 2:
        file.seek(-2, os.SEEK_CUR)
        char = file.read(1)
      else:
        file.seek(0)
        break
    cur = file.tell()
    timestamp = LogEvent(file.readline()).timestamp
    debug('Found %s at %s' % (timestamp, cur))
    if timestamp >= search:
      if end == cur:
        debug('Zero backwards motion - break!')
        break
      else:
        debug('Move backwards')
        end = cur
    else:
      if start == cur:
        if end == file.tell():
          debug('Down to one line - break!')
          break
        else:
          debug('Zero forwards motion - add one line')
          start = file.tell()
      else:
        debug('Move forward')
        start = cur
  file.seek(start)

def parse_user_date(string):
  return parse_timestamp(string if ' ' in string else string+' 00:00:00')

def parse_timestamp(string):
  return datetime.strptime(string, '%Y-%m-%d %H:%M:%S')

class LogEvent(object):
  def __init__(self, line=None, timestamp=None, window_id=None, window_class=None, window_title=None):
    if line:
      timestamp, window_id, window_class, window_title = line.rstrip("\n").split("\t", 3)
      timestamp = parse_timestamp(timestamp)
    self.timestamp = timestamp
    self.window_id = window_id
    self.window_class = window_class
    self.window_title = window_title

if __name__ == "__main__":
  main()
